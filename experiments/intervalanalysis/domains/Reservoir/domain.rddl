domain reservoir_control_cont {

	requirements = {
		concurrent,           // different reservoirs are controlled independently
		reward-deterministic, // this domain does not use a stochastic reward
		intermediate-nodes,   // this domain uses intermediate pvariable nodes
		constrained-state     // this domain uses state constraints
	};

	types {
		reservoir: object;
	};

    pvariables {
		// Constants
        TOP_RES(reservoir): { non-fluent, real, default = 100.0 };                // Overflowing amount
		MAX_RAIN(reservoir):  { non-fluent, real, default = 5.0 };                // Max rainfall per epoch
        RES_CONNECT(reservoir, reservoir): { non-fluent, bool, default = false }; // Indicates 2nd reservoir is forward connected to 1st reservoir
        EVAPORATION_FACTOR: { non-fluent, real, default = 0.05 };                 // Maximum fraction of evaporation
        CONNECTED_TO_SEA(reservoir): {non-fluent, bool, default = false};         // reservoirs connected to the sea
        OVERFLOW_PENALTY(reservoir): { non-fluent, real, default = 15.0 };        // Penalty per unit of level > TOP_RES
        MAX_RELEASE: { non-fluent, real, default = 30.0 };                        // Maximum release

        // Intermediate fluents
        rain(reservoir):   {interm-fluent, real};             // Amount of rain fell
        evaporated(reservoir): {interm-fluent, real};         // Evaporated water from reservoir
        inflow(reservoir):     {interm-fluent, real};         // Amount received from backward reservoirs
        released_water(reservoir): {interm-fluent, real};     // Actual amount of water released (with action clipping)
        overflow(reservoir): {interm-fluent, real};           // Amount of water overflowed to connected reservoirs

        // State fluents
        rlevel(reservoir): {state-fluent, real, default = 50.0 }; // Reservoir level

        // Action fluents
        release(reservoir): { action-fluent, real, default = 0.0 }; // Action to set outflow of reservoir
    };

    cpfs {
        // amount of ran fall for this timestep
        rain(?r) =  Uniform(0, MAX_RAIN(?r));

        // amount of evaporated water, proportional to the amount of water in the tank
        evaporated(?r) = ( EVAPORATION_FACTOR * rlevel(?r) ) / TOP_RES(?r);

        // feasible bound enforcement on action
        released_water(?r) = max[0, min[rlevel(?r), release(?r)]];

        // amount of water overflow the top of the reservoir
        overflow(?r) = max[0, TOP_RES(?r) - (rlevel(?r) + rain(?r) - evaporated(?r) - released_water(?r))];

        // total incoming flow from all previous connected tanks
        inflow(?r) = (sum_{?in : reservoir} [RES_CONNECT(?in,?r) * ( released_water(?in) + overflow(?in))]);

        rlevel'(?r) = min[TOP_RES(?r), max[0, rlevel(?r) + inflow(?r) + rain(?r) - evaporated(?r) - released_water(?r) - overflow(?r)]];
    };

    reward = (sum_{?r: reservoir} [if ( overflow(?r) > 0 )
                                   then -1 * OVERFLOW_PENALTY(?r) * overflow(?r)
                                   else 0
                                   ]);


    action-preconditions {
        // action bounds
		forall_{?r : reservoir} release(?r) <= MAX_RELEASE;
		forall_{?r : reservoir} release(?r) >= 0;
	};

	state-invariants {
        // state bounds
		forall_{?r : reservoir} rlevel(?r) >= 0;
		forall_{?r : reservoir} rlevel(?r) <= TOP_RES(?r);

        // each reservoir should outflow to just one reservoir
        forall_{?r1 : reservoir} (sum_{?r2 : reservoir} [RES_CONNECT(?r1,?r2)]) == 1;
        
        // just one reservoir is connected to the sea
        (sum_{?r : reservoir} [CONNECTED_TO_SEA(?r)]) == 1;
	};

}