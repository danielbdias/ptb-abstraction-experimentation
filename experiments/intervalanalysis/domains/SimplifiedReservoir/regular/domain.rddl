domain simplified_reservoir_control_cont {

	requirements = {
		concurrent,           // different reservoirs are controlled independently
		reward-deterministic, // this domain does not use a stochastic reward
		intermediate-nodes,   // this domain uses intermediate pvariable nodes
		constrained-state     // this domain uses state constraints
	};

	types {
		reservoir: object;
	};

    pvariables {
		// Constants
		REWARD-WEIGHT(reservoir): { non-fluent, real, default = 1.0 };
		RAIN-UPPER-BOUND(reservoir): { non-fluent, real, default = 5.0 };

        // State fluents
        rlevel(reservoir): { state-fluent, real, default = 50.0 }; // Reservoir level

        // Action fluents
        release(reservoir): { action-fluent, real, default = 0.0 }; // Action to set outflow of reservoir
    };

    cpfs {
        rlevel'(?r) = Uniform(rlevel(?r) - release(?r), rlevel(?r) - release(?r) + RAIN-UPPER-BOUND(?r));
    };

    reward = (sum_{?r: reservoir} [ (rlevel(?r) - 90) * REWARD-WEIGHT(?r) ]);


    action-preconditions {
		forall_{?r : reservoir} release(?r) <= 20;
		forall_{?r : reservoir} release(?r) >= 0;
	};

	state-invariants {
		forall_{?r : reservoir} rlevel(?r) >= 0;
		forall_{?r : reservoir} rlevel(?r) <= 100;
	};

}