domain reservoir_control_cont {


	pvariables {

		TOP_RES___t1 : { non-fluent, real, default = 100.0 };
		TOP_RES___t2 : { non-fluent, real, default = 100.0 };
		TOP_RES___t3 : { non-fluent, real, default = 100.0 };
		RAIN_VAR___t1 : { non-fluent, real, default = 5.0 };
		RAIN_VAR___t2 : { non-fluent, real, default = 5.0 };
		RAIN_VAR___t3 : { non-fluent, real, default = 5.0 };
		RES_CONNECT___t1__t1 : { non-fluent, bool, default = false };
		RES_CONNECT___t1__t2 : { non-fluent, bool, default = false };
		RES_CONNECT___t1__t3 : { non-fluent, bool, default = false };
		RES_CONNECT___t2__t1 : { non-fluent, bool, default = false };
		RES_CONNECT___t2__t2 : { non-fluent, bool, default = false };
		RES_CONNECT___t2__t3 : { non-fluent, bool, default = false };
		RES_CONNECT___t3__t1 : { non-fluent, bool, default = false };
		RES_CONNECT___t3__t2 : { non-fluent, bool, default = false };
		RES_CONNECT___t3__t3 : { non-fluent, bool, default = false };
		EVAPORATION_FACTOR : { non-fluent, real, default = 0.05 };
		CONNECTED_TO_SEA___t1 : { non-fluent, bool, default = false };
		CONNECTED_TO_SEA___t2 : { non-fluent, bool, default = false };
		CONNECTED_TO_SEA___t3 : { non-fluent, bool, default = false };
		OVERFLOW_COST___t1 : { non-fluent, real, default = -15.0 };
		OVERFLOW_COST___t2 : { non-fluent, real, default = -15.0 };
		OVERFLOW_COST___t3 : { non-fluent, real, default = -15.0 };

		rain___t1 : { interm-fluent, real };
		rain___t2 : { interm-fluent, real };
		rain___t3 : { interm-fluent, real };
		evaporated___t1 : { interm-fluent, real };
		evaporated___t2 : { interm-fluent, real };
		evaporated___t3 : { interm-fluent, real };
		overflow___t1 : { interm-fluent, real };
		overflow___t2 : { interm-fluent, real };
		overflow___t3 : { interm-fluent, real };
		inflow___t1 : { interm-fluent, real };
		inflow___t2 : { interm-fluent, real };
		inflow___t3 : { interm-fluent, real };
		individual_outflow___t1 : { interm-fluent, real };
		individual_outflow___t2 : { interm-fluent, real };
		individual_outflow___t3 : { interm-fluent, real };
		released_water___t1 : { interm-fluent, real };
		released_water___t2 : { interm-fluent, real };
		released_water___t3 : { interm-fluent, real };

		rlevel___t1 : { state-fluent, real, default = 50.0 };
		rlevel___t2 : { state-fluent, real, default = 50.0 };
		rlevel___t3 : { state-fluent, real, default = 50.0 };

		release___t1 : { action-fluent, real, default = 0.0 };
		release___t2 : { action-fluent, real, default = 0.0 };
		release___t3 : { action-fluent, real, default = 0.0 };
	};

	cpfs {

		rain___t1 = abs[Uniform(0, RAIN_VAR___t1)];

		rain___t2 = abs[Uniform(0, RAIN_VAR___t2)];

		rain___t3 = abs[Uniform(0, RAIN_VAR___t3)];

		evaporated___t1 = ( EVAPORATION_FACTOR * rlevel___t1 ) / TOP_RES___t1;

		evaporated___t2 = ( EVAPORATION_FACTOR * rlevel___t2 ) / TOP_RES___t2;

		evaporated___t3 = ( EVAPORATION_FACTOR * rlevel___t3 ) / TOP_RES___t3;

		overflow___t1 = max[0, ( rlevel___t1 - released_water___t1 ) - TOP_RES___t1];

		overflow___t2 = max[0, ( rlevel___t2 - released_water___t2 ) - TOP_RES___t2];

		overflow___t3 = max[0, ( rlevel___t3 - released_water___t3 ) - TOP_RES___t3];

		inflow___t1 = ( RES_CONNECT___t1__t1 * individual_outflow___t1 ) + ( RES_CONNECT___t2__t1 * individual_outflow___t2 ) + ( RES_CONNECT___t3__t1 * individual_outflow___t3 );

		inflow___t2 = ( RES_CONNECT___t1__t2 * individual_outflow___t1 ) + ( RES_CONNECT___t2__t2 * individual_outflow___t2 ) + ( RES_CONNECT___t3__t2 * individual_outflow___t3 );

		inflow___t3 = ( RES_CONNECT___t1__t3 * individual_outflow___t1 ) + ( RES_CONNECT___t2__t3 * individual_outflow___t2 ) + ( RES_CONNECT___t3__t3 * individual_outflow___t3 );

		individual_outflow___t1 = ( released_water___t1 * 1 ) / ( ( RES_CONNECT___t1__t1 + RES_CONNECT___t1__t2 + RES_CONNECT___t1__t3 ) + CONNECTED_TO_SEA___t1 );

		individual_outflow___t2 = ( released_water___t2 * 1 ) / ( ( RES_CONNECT___t2__t1 + RES_CONNECT___t2__t2 + RES_CONNECT___t2__t3 ) + CONNECTED_TO_SEA___t2 );

		individual_outflow___t3 = ( released_water___t3 * 1 ) / ( ( RES_CONNECT___t3__t1 + RES_CONNECT___t3__t2 + RES_CONNECT___t3__t3 ) + CONNECTED_TO_SEA___t3 );

		released_water___t1 = max[0, min[rlevel___t1, release___t1]];

		released_water___t2 = max[0, min[rlevel___t2, release___t2]];

		released_water___t3 = max[0, min[rlevel___t3, release___t3]];

		rlevel___t1' = min[TOP_RES___t1, max[0, ( ( ( ( rlevel___t1 + inflow___t1 ) + rain___t1 ) - evaporated___t1 ) - overflow___t1 ) - released_water___t1]];

		rlevel___t2' = min[TOP_RES___t2, max[0, ( ( ( ( rlevel___t2 + inflow___t2 ) + rain___t2 ) - evaporated___t2 ) - overflow___t2 ) - released_water___t2]];

		rlevel___t3' = rlevel___t3;
	};

	reward = ( if (( rlevel___t1 + inflow___t1 ) >= TOP_RES___t1)
			then ( OVERFLOW_COST___t1 * ( ( TOP_RES___t1 - rlevel___t1 ) + inflow___t1 ) )
			else 0 ) + ( if (( rlevel___t2 + inflow___t2 ) >= TOP_RES___t2)
			then ( OVERFLOW_COST___t2 * ( ( TOP_RES___t2 - rlevel___t2 ) + inflow___t2 ) )
			else 0 ) + ( if (( rlevel___t3 + inflow___t3 ) >= TOP_RES___t3)
			then ( OVERFLOW_COST___t3 * ( ( TOP_RES___t3 - rlevel___t3 ) + inflow___t3 ) )
			else 0 );

	state-invariants {
		( rlevel___t1 >= 0 ) ^ ( rlevel___t2 >= 0 ) ^ ( rlevel___t3 >= 0 );
		( rlevel___t1 <= TOP_RES___t1 ) ^ ( rlevel___t2 <= TOP_RES___t2 ) ^ ( rlevel___t3 <= TOP_RES___t3 );
		( RAIN_VAR___t1 <= 30 ) ^ ( RAIN_VAR___t2 <= 30 ) ^ ( RAIN_VAR___t3 <= 30 );
		( CONNECTED_TO_SEA___t1 + CONNECTED_TO_SEA___t2 + CONNECTED_TO_SEA___t3 ) == 1;
	};

	action-preconditions {
		( release___t1 <= 30 ) ^ ( release___t2 <= 30 ) ^ ( release___t3 <= 30 );
		( release___t1 >= 0 ) ^ ( release___t2 >= 0 ) ^ ( release___t3 >= 0 );
	};
}