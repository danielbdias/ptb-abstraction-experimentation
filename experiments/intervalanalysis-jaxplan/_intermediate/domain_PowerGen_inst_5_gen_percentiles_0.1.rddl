domain power_gen {


	pvariables {

		PROD-UNITS-MIN___p1 : { non-fluent, real, default = 1.0 };
		PROD-UNITS-MIN___p2 : { non-fluent, real, default = 1.0 };
		PROD-UNITS-MIN___p3 : { non-fluent, real, default = 1.0 };
		PROD-UNITS-MIN___p4 : { non-fluent, real, default = 1.0 };
		PROD-UNITS-MIN___p5 : { non-fluent, real, default = 1.0 };
		PROD-UNITS-MAX___p1 : { non-fluent, real, default = 10.0 };
		PROD-UNITS-MAX___p2 : { non-fluent, real, default = 10.0 };
		PROD-UNITS-MAX___p3 : { non-fluent, real, default = 10.0 };
		PROD-UNITS-MAX___p4 : { non-fluent, real, default = 10.0 };
		PROD-UNITS-MAX___p5 : { non-fluent, real, default = 10.0 };
		PROD-CHANGE-PENALTY___p1 : { non-fluent, real, default = 1.0 };
		PROD-CHANGE-PENALTY___p2 : { non-fluent, real, default = 1.0 };
		PROD-CHANGE-PENALTY___p3 : { non-fluent, real, default = 1.0 };
		PROD-CHANGE-PENALTY___p4 : { non-fluent, real, default = 1.0 };
		PROD-CHANGE-PENALTY___p5 : { non-fluent, real, default = 1.0 };
		TURN-ON-COST___p1 : { non-fluent, real, default = 0.0 };
		TURN-ON-COST___p2 : { non-fluent, real, default = 0.0 };
		TURN-ON-COST___p3 : { non-fluent, real, default = 0.0 };
		TURN-ON-COST___p4 : { non-fluent, real, default = 0.0 };
		TURN-ON-COST___p5 : { non-fluent, real, default = 0.0 };
		COST-PER-UNIT___p1 : { non-fluent, real, default = 5.0 };
		COST-PER-UNIT___p2 : { non-fluent, real, default = 5.0 };
		COST-PER-UNIT___p3 : { non-fluent, real, default = 5.0 };
		COST-PER-UNIT___p4 : { non-fluent, real, default = 5.0 };
		COST-PER-UNIT___p5 : { non-fluent, real, default = 5.0 };
		INCOME-PER-UNIT : { non-fluent, real, default = 8.0 };
		TEMP-VARIANCE : { non-fluent, real, default = 5.0 };
		TEMP-MIN : { non-fluent, real, default = -30.0 };
		TEMP-MAX : { non-fluent, real, default = 40.0 };
		DEMAND-EXP-COEF : { non-fluent, real, default = 0.01 };
		MIN-DEMAND-TEMP : { non-fluent, real, default = 11.7 };
		MIN-CONSUMPTION : { non-fluent, real, default = 2 };
		UNFULFILLED-DEMAND-PENALTY : { non-fluent, real, default = 1000.0 };
		PROD-SHAPE___p1 : { non-fluent, real, default = 1.0 };
		PROD-SHAPE___p2 : { non-fluent, real, default = 1.0 };
		PROD-SHAPE___p3 : { non-fluent, real, default = 1.0 };
		PROD-SHAPE___p4 : { non-fluent, real, default = 1.0 };
		PROD-SHAPE___p5 : { non-fluent, real, default = 1.0 };
		PROD-SCALE___p1 : { non-fluent, real, default = 1e-07 };
		PROD-SCALE___p2 : { non-fluent, real, default = 1e-07 };
		PROD-SCALE___p3 : { non-fluent, real, default = 1e-07 };
		PROD-SCALE___p4 : { non-fluent, real, default = 1e-07 };
		PROD-SCALE___p5 : { non-fluent, real, default = 1e-07 };
		CLIPPING-MIN : { non-fluent, real, default = -1000000.0 };
		CLIPPING-MAX : { non-fluent, real, default = 1000000.0 };

		demand : { interm-fluent, real };
		fulfilledDemand : { interm-fluent, real };
		effectiveProd___p1 : { interm-fluent, real };
		effectiveProd___p2 : { interm-fluent, real };
		effectiveProd___p3 : { interm-fluent, real };
		effectiveProd___p4 : { interm-fluent, real };
		effectiveProd___p5 : { interm-fluent, real };
		curOn___p1 : { interm-fluent, bool };
		curOn___p2 : { interm-fluent, bool };
		curOn___p3 : { interm-fluent, bool };
		curOn___p4 : { interm-fluent, bool };
		curOn___p5 : { interm-fluent, bool };

		prevProd___p1 : { state-fluent, real, default = 0 };
		prevProd___p2 : { state-fluent, real, default = 0 };
		prevProd___p3 : { state-fluent, real, default = 0 };
		prevProd___p4 : { state-fluent, real, default = 0 };
		prevProd___p5 : { state-fluent, real, default = 0 };
		prevOn___p1 : { state-fluent, bool, default = false };
		prevOn___p2 : { state-fluent, bool, default = false };
		prevOn___p3 : { state-fluent, bool, default = false };
		prevOn___p4 : { state-fluent, bool, default = false };
		prevOn___p5 : { state-fluent, bool, default = false };
		temperature : { state-fluent, real, default = 20 };

		curProd___p1 : { action-fluent, real, default = 0 };
		curProd___p2 : { action-fluent, real, default = 0 };
		curProd___p3 : { action-fluent, real, default = 0 };
		curProd___p4 : { action-fluent, real, default = 0 };
		curProd___p5 : { action-fluent, real, default = 0 };
	};

	cpfs {

		prevProd___p1' = effectiveProd___p1;

		prevProd___p2' = effectiveProd___p2;

		prevProd___p3' = effectiveProd___p3;

		prevProd___p4' = effectiveProd___p4;

		prevProd___p5' = effectiveProd___p5;

		prevOn___p1' = curOn___p1;

		prevOn___p2' = curOn___p2;

		prevOn___p3' = curOn___p3;

		prevOn___p4' = curOn___p4;

		prevOn___p5' = curOn___p5;

		temperature' = temperature;

		demand = MIN-CONSUMPTION + ( DEMAND-EXP-COEF * pow[temperature - MIN-DEMAND-TEMP, 2] );

		fulfilledDemand = min[demand, effectiveProd___p1 + effectiveProd___p2 + effectiveProd___p3 + effectiveProd___p4 + effectiveProd___p5];

		effectiveProd___p1 = if (curOn___p1)
			then max[min[curProd___p1 + Weibull(PROD-SHAPE___p1, PROD-SCALE___p1), PROD-UNITS-MAX___p1], PROD-UNITS-MIN___p1]
			else 0.0;

		effectiveProd___p2 = if (curOn___p2)
			then max[min[curProd___p2 + Weibull(PROD-SHAPE___p2, PROD-SCALE___p2), PROD-UNITS-MAX___p2], PROD-UNITS-MIN___p2]
			else 0.0;

		effectiveProd___p3 = if (curOn___p3)
			then max[min[curProd___p3 + Weibull(PROD-SHAPE___p3, PROD-SCALE___p3), PROD-UNITS-MAX___p3], PROD-UNITS-MIN___p3]
			else 0.0;

		effectiveProd___p4 = if (curOn___p4)
			then max[min[curProd___p4 + Weibull(PROD-SHAPE___p4, PROD-SCALE___p4), PROD-UNITS-MAX___p4], PROD-UNITS-MIN___p4]
			else 0.0;

		effectiveProd___p5 = if (curOn___p5)
			then max[min[curProd___p5 + Weibull(PROD-SHAPE___p5, PROD-SCALE___p5), PROD-UNITS-MAX___p5], PROD-UNITS-MIN___p5]
			else 0.0;

		curOn___p1 = curProd___p1 >= PROD-UNITS-MIN___p1;

		curOn___p2 = curProd___p2 >= PROD-UNITS-MIN___p2;

		curOn___p3 = curProd___p3 >= PROD-UNITS-MIN___p3;

		curOn___p4 = curProd___p4 >= PROD-UNITS-MIN___p4;

		curOn___p5 = curProd___p5 >= PROD-UNITS-MIN___p5;
	};

	reward = ( ( ( ( -( ( effectiveProd___p1 * COST-PER-UNIT___p1 ) + ( effectiveProd___p2 * COST-PER-UNIT___p2 ) + ( effectiveProd___p3 * COST-PER-UNIT___p3 ) + ( effectiveProd___p4 * COST-PER-UNIT___p4 ) + ( effectiveProd___p5 * COST-PER-UNIT___p5 ) ) ) + ( fulfilledDemand * INCOME-PER-UNIT ) ) - ( if (demand > fulfilledDemand)
			then UNFULFILLED-DEMAND-PENALTY
			else 0.0 ) ) + ( ( abs[effectiveProd___p1 - prevProd___p1] * PROD-CHANGE-PENALTY___p1 ) + ( abs[effectiveProd___p2 - prevProd___p2] * PROD-CHANGE-PENALTY___p2 ) + ( abs[effectiveProd___p3 - prevProd___p3] * PROD-CHANGE-PENALTY___p3 ) + ( abs[effectiveProd___p4 - prevProd___p4] * PROD-CHANGE-PENALTY___p4 ) + ( abs[effectiveProd___p5 - prevProd___p5] * PROD-CHANGE-PENALTY___p5 ) ) ) - ( ( if (( ~prevOn___p1 ) ^ curOn___p1)
			then TURN-ON-COST___p1
			else 0.0 ) + ( if (( ~prevOn___p2 ) ^ curOn___p2)
			then TURN-ON-COST___p2
			else 0.0 ) + ( if (( ~prevOn___p3 ) ^ curOn___p3)
			then TURN-ON-COST___p3
			else 0.0 ) + ( if (( ~prevOn___p4 ) ^ curOn___p4)
			then TURN-ON-COST___p4
			else 0.0 ) + ( if (( ~prevOn___p5 ) ^ curOn___p5)
			then TURN-ON-COST___p5
			else 0.0 ) );

	state-invariants {
		temperature <= CLIPPING-MAX;
		temperature >= CLIPPING-MAX;
		( prevProd___p1 <= CLIPPING-MAX ) ^ ( prevProd___p2 <= CLIPPING-MAX ) ^ ( prevProd___p3 <= CLIPPING-MAX ) ^ ( prevProd___p4 <= CLIPPING-MAX ) ^ ( prevProd___p5 <= CLIPPING-MAX );
		( prevProd___p1 >= CLIPPING-MIN ) ^ ( prevProd___p2 >= CLIPPING-MIN ) ^ ( prevProd___p3 >= CLIPPING-MIN ) ^ ( prevProd___p4 >= CLIPPING-MIN ) ^ ( prevProd___p5 >= CLIPPING-MIN );
	};

	action-preconditions {
		( curProd___p1 >= 0.0 ) ^ ( curProd___p2 >= 0.0 ) ^ ( curProd___p3 >= 0.0 ) ^ ( curProd___p4 >= 0.0 ) ^ ( curProd___p5 >= 0.0 );
		( curProd___p1 <= PROD-UNITS-MAX___p1 ) ^ ( curProd___p2 <= PROD-UNITS-MAX___p2 ) ^ ( curProd___p3 <= PROD-UNITS-MAX___p3 ) ^ ( curProd___p4 <= PROD-UNITS-MAX___p4 ) ^ ( curProd___p5 <= PROD-UNITS-MAX___p5 );
	};
}