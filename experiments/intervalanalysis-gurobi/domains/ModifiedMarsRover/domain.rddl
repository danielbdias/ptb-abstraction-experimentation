////////////////////////////////////////////////////////////////////
// A simple continuous MDP for a single Mars Rover.  Note that this
// models continuous time explicitly since there is only one rover.
//
// The goal here is to take as many high-value pictures (within their
// designated radii) as possible within the time constraints.
//
// Motivated by:
//
//   Bresina, J. L.; Dearden, R.; Meuleau, N.; Ramkrishnan, S.;
//   Smith, D. E.; and Washington, R. 2002. Planning under continuous
//   time and resource uncertainty: A challenge for AI. UAI 2002.
//
// Author: Scott Sanner (ssanner@gmail.com)
////////////////////////////////////////////////////////////////////
domain simple_mars_rover {
  
	requirements = { 
		concurrent,           // x and y directions move independently and simultaneously
		reward-deterministic, // this domain does not use a stochastic reward
		intermediate-nodes,   // this domain uses intermediate pvariable nodes
		constrained-state     // this domain uses state constraints
	};

	types {
		picture-point : object;
	};

	pvariables { 
    		  		
    	// Problem constants
    	MAX_TIME : { non-fluent, real, default = 12.0 };
    		  		
		// Rover constants
		MOVE_VARIANCE_MULT : { non-fluent, real, default = 0.5 };
		
		// Each picture occurs in a different place and awards a different value
		PICT_XPOS(picture-point)   : { non-fluent, real, default = 0.0 };
		PICT_YPOS(picture-point)   : { non-fluent, real, default = 0.0 };
		PICT_VALUE(picture-point)  : { non-fluent, real, default = 1.0 };
		PICT_ERROR_ALLOW(picture-point) : { non-fluent, real, default = 0.5 };
		
        CLIPPING-MIN            : { non-fluent, real, default = -1000000.0 };   // values used to clip during interval analysis
		CLIPPING-MAX            : { non-fluent, real, default = 1000000.0 };    // values used to clip during interval analysis

		// State fluents
		xPos                         : { state-fluent, real, default = 0.0 };
		yPos                         : { state-fluent, real, default = 0.0 };
		time                         : { state-fluent, real, default = 0.0 };
        picture-taken(picture-point) : { state-fluent, bool, default = false };

		// Action fluents -- constraints enforce that a rover cannot snap a picture
		//                   and move simultaneously
		xMove       : { action-fluent, real, default = 0.0 };
		yMove       : { action-fluent, real, default = 0.0 };
		snapPicture : { action-fluent, bool, default = false };
		
	};
	
	cpfs {

		// Update rover coordinates based on movement, we assume surface 
		// of Mars has no coordinate constraints.  Can add if needed.
		xPos' = xPos + xMove + Normal(0.0, MOVE_VARIANCE_MULT*xMove);
		yPos' = yPos + yMove + Normal(0.0, MOVE_VARIANCE_MULT*yMove);
		
		// We assume taking a picture requires 1/4 hour and movement takes
		// the Manhattan distance time (assuming units are meters and speed 
		// is 1 m/hour).  Euclidean distance would be more plausible, but
		// we need to add elementary functions like sqrt into RDDL for this.
		// Even an absolute value would simplify things here as well.
		time' = if (snapPicture)
				then DiracDelta(time + 0.25)
				else DiracDelta(time + 
					[if (xMove > 0) then xMove else -xMove] + 
					[if (yMove > 0) then yMove else -yMove]);

        // Picture taken if within error bounds and time limit
        picture-taken'(?p) = if (snapPicture ^ (time <= MAX_TIME))
                             then if ((xPos >= PICT_XPOS(?p) - PICT_ERROR_ALLOW(?p))
                                      ^ (xPos <= PICT_XPOS(?p) + PICT_ERROR_ALLOW(?p))
                                      ^ (yPos >= PICT_YPOS(?p) - PICT_ERROR_ALLOW(?p))
                                      ^ (yPos <= PICT_YPOS(?p) + PICT_ERROR_ALLOW(?p)))
                                    then true
                                    else picture-taken(?p)
                             else picture-taken(?p);
	};
  
	// We get a reward for any picture taken within picture box error bounds 
	// and the time limit.
	reward = sum_{?p : picture-point} [ if (picture-taken(?p)) then PICT_VALUE(?p) else 0.0 ];
	
	action-preconditions {
		// Cannot snap a picture and move at the same time
		snapPicture => ((xMove == 0.0) ^ (yMove == 0.0));

		// Interval propagation constraints
		xMove <= CLIPPING-MAX;
		xMove >= CLIPPING-MAX;
		yMove <= CLIPPING-MAX;
		yMove >= CLIPPING-MAX;
	};

	state-invariants {
		// Interval propagation constraints
		xPos <= CLIPPING-MAX;
		xPos >= CLIPPING-MAX;
		yPos <= CLIPPING-MAX;
		yPos >= CLIPPING-MAX;
		time <= CLIPPING-MAX;
		time >= CLIPPING-MAX;
	};
}
        
